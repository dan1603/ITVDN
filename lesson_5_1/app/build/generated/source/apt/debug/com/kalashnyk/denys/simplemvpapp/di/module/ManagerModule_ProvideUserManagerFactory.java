// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.simplemvpapp.di.module;

import com.kalashnyk.denys.simplemvpapp.data.database.UserDao;
import com.kalashnyk.denys.simplemvpapp.data.managers.UserManager;
import com.kalashnyk.denys.simplemvpapp.data.network.ServerCommunicator;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ManagerModule_ProvideUserManagerFactory implements Factory<UserManager> {
  private final ManagerModule module;

  private final Provider<ServerCommunicator> communicatorProvider;

  private final Provider<UserDao> dAOuserProvider;

  public ManagerModule_ProvideUserManagerFactory(
      ManagerModule module,
      Provider<ServerCommunicator> communicatorProvider,
      Provider<UserDao> dAOuserProvider) {
    this.module = module;
    this.communicatorProvider = communicatorProvider;
    this.dAOuserProvider = dAOuserProvider;
  }

  @Override
  public UserManager get() {
    return Preconditions.checkNotNull(
        module.provideUserManager(communicatorProvider.get(), dAOuserProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ManagerModule_ProvideUserManagerFactory create(
      ManagerModule module,
      Provider<ServerCommunicator> communicatorProvider,
      Provider<UserDao> dAOuserProvider) {
    return new ManagerModule_ProvideUserManagerFactory(
        module, communicatorProvider, dAOuserProvider);
  }

  public static UserManager proxyProvideUserManager(
      ManagerModule instance, ServerCommunicator communicator, UserDao DAOuser) {
    return Preconditions.checkNotNull(
        instance.provideUserManager(communicator, DAOuser),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
