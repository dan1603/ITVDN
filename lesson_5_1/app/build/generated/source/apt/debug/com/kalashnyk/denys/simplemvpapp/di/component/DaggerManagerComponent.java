// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.simplemvpapp.di.component;

import com.kalashnyk.denys.simplemvpapp.data.managers.UserManager;
import com.kalashnyk.denys.simplemvpapp.di.module.ManagerModule;
import com.kalashnyk.denys.simplemvpapp.di.module.ManagerModule_ProvideUserManagerFactory;
import dagger.internal.Preconditions;

public final class DaggerManagerComponent implements ManagerComponent {
  private ManagerModule managerModule;

  private ApiComponent apiComponent;

  private DAOComponent dAOComponent;

  private DaggerManagerComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.managerModule = builder.managerModule;
    this.apiComponent = builder.apiComponent;
    this.dAOComponent = builder.dAOComponent;
  }

  @Override
  public UserManager getUserManager() {
    return ManagerModule_ProvideUserManagerFactory.proxyProvideUserManager(
        managerModule,
        Preconditions.checkNotNull(
            apiComponent.getUserServerCommunicator(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            dAOComponent.getUserDAO(), "Cannot return null from a non-@Nullable component method"));
  }

  public static final class Builder {
    private ManagerModule managerModule;

    private ApiComponent apiComponent;

    private DAOComponent dAOComponent;

    private Builder() {}

    public ManagerComponent build() {
      if (managerModule == null) {
        this.managerModule = new ManagerModule();
      }
      if (apiComponent == null) {
        throw new IllegalStateException(ApiComponent.class.getCanonicalName() + " must be set");
      }
      if (dAOComponent == null) {
        throw new IllegalStateException(DAOComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerManagerComponent(this);
    }

    public Builder managerModule(ManagerModule managerModule) {
      this.managerModule = Preconditions.checkNotNull(managerModule);
      return this;
    }

    public Builder apiComponent(ApiComponent apiComponent) {
      this.apiComponent = Preconditions.checkNotNull(apiComponent);
      return this;
    }

    public Builder dAOComponent(DAOComponent dAOComponent) {
      this.dAOComponent = Preconditions.checkNotNull(dAOComponent);
      return this;
    }
  }
}
