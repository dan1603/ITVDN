// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.simplemvpapp.di.component;

import com.kalashnyk.denys.simplemvpapp.data.managers.UserManager;
import com.kalashnyk.denys.simplemvpapp.di.module.InteractorModule;
import com.kalashnyk.denys.simplemvpapp.di.module.InteractorModule_ProvideUserInteractorFactory;
import com.kalashnyk.denys.simplemvpapp.domain.UserInteractor;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerInteractorComponent implements InteractorComponent {
  private com_kalashnyk_denys_simplemvpapp_di_component_ManagerComponent_getUserManager
      getUserManagerProvider;

  private Provider<UserInteractor> provideUserInteractorProvider;

  private DaggerInteractorComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.getUserManagerProvider =
        new com_kalashnyk_denys_simplemvpapp_di_component_ManagerComponent_getUserManager(
            builder.managerComponent);
    this.provideUserInteractorProvider =
        DoubleCheck.provider(
            InteractorModule_ProvideUserInteractorFactory.create(
                builder.interactorModule, getUserManagerProvider));
  }

  @Override
  public UserInteractor getUserInteractor() {
    return provideUserInteractorProvider.get();
  }

  public static final class Builder {
    private InteractorModule interactorModule;

    private ManagerComponent managerComponent;

    private Builder() {}

    public InteractorComponent build() {
      if (interactorModule == null) {
        this.interactorModule = new InteractorModule();
      }
      if (managerComponent == null) {
        throw new IllegalStateException(ManagerComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerInteractorComponent(this);
    }

    public Builder interactorModule(InteractorModule interactorModule) {
      this.interactorModule = Preconditions.checkNotNull(interactorModule);
      return this;
    }

    public Builder managerComponent(ManagerComponent managerComponent) {
      this.managerComponent = Preconditions.checkNotNull(managerComponent);
      return this;
    }
  }

  private static class com_kalashnyk_denys_simplemvpapp_di_component_ManagerComponent_getUserManager
      implements Provider<UserManager> {
    private final ManagerComponent managerComponent;

    com_kalashnyk_denys_simplemvpapp_di_component_ManagerComponent_getUserManager(
        ManagerComponent managerComponent) {
      this.managerComponent = managerComponent;
    }

    @Override
    public UserManager get() {
      return Preconditions.checkNotNull(
          managerComponent.getUserManager(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
