// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.simplemvpapp.di.module;

import com.kalashnyk.denys.simplemvpapp.data.network.ApiService;
import com.kalashnyk.denys.simplemvpapp.data.network.ServerCommunicator;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ApiModule_ProvideObscuraServerCommunicatorFactory
    implements Factory<ServerCommunicator> {
  private final ApiModule module;

  private final Provider<ApiService> apiServiceProvider;

  public ApiModule_ProvideObscuraServerCommunicatorFactory(
      ApiModule module, Provider<ApiService> apiServiceProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public ServerCommunicator get() {
    return Preconditions.checkNotNull(
        module.provideObscuraServerCommunicator(apiServiceProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ApiModule_ProvideObscuraServerCommunicatorFactory create(
      ApiModule module, Provider<ApiService> apiServiceProvider) {
    return new ApiModule_ProvideObscuraServerCommunicatorFactory(module, apiServiceProvider);
  }

  public static ServerCommunicator proxyProvideObscuraServerCommunicator(
      ApiModule instance, ApiService apiService) {
    return Preconditions.checkNotNull(
        instance.provideObscuraServerCommunicator(apiService),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
