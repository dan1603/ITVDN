// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.simplemvpapp.di.module;

import com.kalashnyk.denys.simplemvpapp.domain.UserInteractor;
import com.kalashnyk.denys.simplemvpapp.presentation.activity.detail.DetailContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PresenterModule_ProvideAuthPresenterFactory
    implements Factory<DetailContract.Presenter> {
  private final PresenterModule module;

  private final Provider<UserInteractor> userInteractorProvider;

  public PresenterModule_ProvideAuthPresenterFactory(
      PresenterModule module, Provider<UserInteractor> userInteractorProvider) {
    this.module = module;
    this.userInteractorProvider = userInteractorProvider;
  }

  @Override
  public DetailContract.Presenter get() {
    return Preconditions.checkNotNull(
        module.provideAuthPresenter(userInteractorProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static PresenterModule_ProvideAuthPresenterFactory create(
      PresenterModule module, Provider<UserInteractor> userInteractorProvider) {
    return new PresenterModule_ProvideAuthPresenterFactory(module, userInteractorProvider);
  }

  public static DetailContract.Presenter proxyProvideAuthPresenter(
      PresenterModule instance, UserInteractor userInteractor) {
    return Preconditions.checkNotNull(
        instance.provideAuthPresenter(userInteractor),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
