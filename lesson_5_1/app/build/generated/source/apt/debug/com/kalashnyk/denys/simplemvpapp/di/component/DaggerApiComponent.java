// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.simplemvpapp.di.component;

import com.kalashnyk.denys.simplemvpapp.data.network.ApiService;
import com.kalashnyk.denys.simplemvpapp.data.network.ServerCommunicator;
import com.kalashnyk.denys.simplemvpapp.di.module.ApiModule;
import com.kalashnyk.denys.simplemvpapp.di.module.ApiModule_ProvideApiServiceFactory;
import com.kalashnyk.denys.simplemvpapp.di.module.ApiModule_ProvideObscuraServerCommunicatorFactory;
import com.kalashnyk.denys.simplemvpapp.di.module.ApiModule_ProvideRetrofitBuilderFactory;
import com.kalashnyk.denys.simplemvpapp.di.module.ApiModule_ProvideRetrofitFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerApiComponent implements ApiComponent {
  private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<ServerCommunicator> provideObscuraServerCommunicatorProvider;

  private DaggerApiComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ApiComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideRetrofitBuilderProvider =
        DoubleCheck.provider(ApiModule_ProvideRetrofitBuilderFactory.create(builder.apiModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideRetrofitFactory.create(
                builder.apiModule, provideRetrofitBuilderProvider));
    this.provideApiServiceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideApiServiceFactory.create(builder.apiModule, provideRetrofitProvider));
    this.provideObscuraServerCommunicatorProvider =
        DoubleCheck.provider(
            ApiModule_ProvideObscuraServerCommunicatorFactory.create(
                builder.apiModule, provideApiServiceProvider));
  }

  @Override
  public ServerCommunicator getUserServerCommunicator() {
    return provideObscuraServerCommunicatorProvider.get();
  }

  public static final class Builder {
    private ApiModule apiModule;

    private Builder() {}

    public ApiComponent build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      return new DaggerApiComponent(this);
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }
  }
}
