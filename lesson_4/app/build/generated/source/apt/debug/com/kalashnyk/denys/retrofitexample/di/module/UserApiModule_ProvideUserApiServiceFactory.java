// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.retrofitexample.di.module;

import com.kalashnyk.denys.retrofitexample.server.UserAPI;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class UserApiModule_ProvideUserApiServiceFactory implements Factory<UserAPI> {
  private final UserApiModule module;

  private final Provider<Retrofit> retrofitProvider;

  public UserApiModule_ProvideUserApiServiceFactory(
      UserApiModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public UserAPI get() {
    return Preconditions.checkNotNull(
        module.provideUserApiService(retrofitProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static UserApiModule_ProvideUserApiServiceFactory create(
      UserApiModule module, Provider<Retrofit> retrofitProvider) {
    return new UserApiModule_ProvideUserApiServiceFactory(module, retrofitProvider);
  }

  public static UserAPI proxyProvideUserApiService(UserApiModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideUserApiService(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
