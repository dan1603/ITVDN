// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.samplemvvmapp.di.component;

import com.kalashnyk.denys.samplemvvmapp.di.module.ViewModelModule;
import com.kalashnyk.denys.samplemvvmapp.di.module.ViewModelModule_ProvidesAllUserViewModelFactory;
import com.kalashnyk.denys.samplemvvmapp.di.module.ViewModelModule_ProvidesSingleUserViewModelFactory;
import com.kalashnyk.denys.samplemvvmapp.domain.AllUsersViewModel;
import com.kalashnyk.denys.samplemvvmapp.domain.SingleUserViewModel;
import com.kalashnyk.denys.samplemvvmapp.presentation.activities.detail.DetailActivity;
import com.kalashnyk.denys.samplemvvmapp.presentation.activities.detail.DetailActivity_MembersInjector;
import com.kalashnyk.denys.samplemvvmapp.presentation.activities.main.MainActivity;
import com.kalashnyk.denys.samplemvvmapp.presentation.activities.main.MainActivity_MembersInjector;
import com.kalashnyk.denys.samplemvvmapp.repository.AppRepository;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerViewModelComponent implements ViewModelComponent {
  private com_kalashnyk_denys_samplemvvmapp_di_component_RepositoryComponent_getRepository
      getRepositoryProvider;

  private Provider<AllUsersViewModel> providesAllUserViewModelProvider;

  private Provider<SingleUserViewModel> providesSingleUserViewModelProvider;

  private DaggerViewModelComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.getRepositoryProvider =
        new com_kalashnyk_denys_samplemvvmapp_di_component_RepositoryComponent_getRepository(
            builder.repositoryComponent);
    this.providesAllUserViewModelProvider =
        DoubleCheck.provider(
            ViewModelModule_ProvidesAllUserViewModelFactory.create(
                builder.viewModelModule, getRepositoryProvider));
    this.providesSingleUserViewModelProvider =
        DoubleCheck.provider(
            ViewModelModule_ProvidesSingleUserViewModelFactory.create(
                builder.viewModelModule, getRepositoryProvider));
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  @Override
  public void inject(DetailActivity activity) {
    injectDetailActivity(activity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMViewModel(instance, providesAllUserViewModelProvider.get());
    return instance;
  }

  private DetailActivity injectDetailActivity(DetailActivity instance) {
    DetailActivity_MembersInjector.injectMViewModel(
        instance, providesSingleUserViewModelProvider.get());
    return instance;
  }

  public static final class Builder {
    private ViewModelModule viewModelModule;

    private RepositoryComponent repositoryComponent;

    private Builder() {}

    public ViewModelComponent build() {
      if (viewModelModule == null) {
        throw new IllegalStateException(ViewModelModule.class.getCanonicalName() + " must be set");
      }
      if (repositoryComponent == null) {
        throw new IllegalStateException(
            RepositoryComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerViewModelComponent(this);
    }

    public Builder viewModelModule(ViewModelModule viewModelModule) {
      this.viewModelModule = Preconditions.checkNotNull(viewModelModule);
      return this;
    }

    public Builder repositoryComponent(RepositoryComponent repositoryComponent) {
      this.repositoryComponent = Preconditions.checkNotNull(repositoryComponent);
      return this;
    }
  }

  private static
  class com_kalashnyk_denys_samplemvvmapp_di_component_RepositoryComponent_getRepository
      implements Provider<AppRepository> {
    private final RepositoryComponent repositoryComponent;

    com_kalashnyk_denys_samplemvvmapp_di_component_RepositoryComponent_getRepository(
        RepositoryComponent repositoryComponent) {
      this.repositoryComponent = repositoryComponent;
    }

    @Override
    public AppRepository get() {
      return Preconditions.checkNotNull(
          repositoryComponent.getRepository(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
