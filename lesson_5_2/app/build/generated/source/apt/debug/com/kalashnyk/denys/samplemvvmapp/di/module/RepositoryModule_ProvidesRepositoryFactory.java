// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.samplemvvmapp.di.module;

import com.kalashnyk.denys.samplemvvmapp.repository.AppRepository;
import com.kalashnyk.denys.samplemvvmapp.repository.database.dao.UserDao;
import com.kalashnyk.denys.samplemvvmapp.repository.server.ServerCommunicator;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class RepositoryModule_ProvidesRepositoryFactory implements Factory<AppRepository> {
  private final RepositoryModule module;

  private final Provider<ServerCommunicator> communicatorProvider;

  private final Provider<UserDao> productDAOProvider;

  public RepositoryModule_ProvidesRepositoryFactory(
      RepositoryModule module,
      Provider<ServerCommunicator> communicatorProvider,
      Provider<UserDao> productDAOProvider) {
    this.module = module;
    this.communicatorProvider = communicatorProvider;
    this.productDAOProvider = productDAOProvider;
  }

  @Override
  public AppRepository get() {
    return Preconditions.checkNotNull(
        module.providesRepository(communicatorProvider.get(), productDAOProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static RepositoryModule_ProvidesRepositoryFactory create(
      RepositoryModule module,
      Provider<ServerCommunicator> communicatorProvider,
      Provider<UserDao> productDAOProvider) {
    return new RepositoryModule_ProvidesRepositoryFactory(
        module, communicatorProvider, productDAOProvider);
  }

  public static AppRepository proxyProvidesRepository(
      RepositoryModule instance, ServerCommunicator communicator, UserDao productDAO) {
    return Preconditions.checkNotNull(
        instance.providesRepository(communicator, productDAO),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
