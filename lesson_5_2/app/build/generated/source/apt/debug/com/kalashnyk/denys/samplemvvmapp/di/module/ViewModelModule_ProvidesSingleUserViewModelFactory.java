// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.samplemvvmapp.di.module;

import com.kalashnyk.denys.samplemvvmapp.domain.SingleUserViewModel;
import com.kalashnyk.denys.samplemvvmapp.repository.AppRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ViewModelModule_ProvidesSingleUserViewModelFactory
    implements Factory<SingleUserViewModel> {
  private final ViewModelModule module;

  private final Provider<AppRepository> repositoryProvider;

  public ViewModelModule_ProvidesSingleUserViewModelFactory(
      ViewModelModule module, Provider<AppRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public SingleUserViewModel get() {
    return Preconditions.checkNotNull(
        module.providesSingleUserViewModel(repositoryProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ViewModelModule_ProvidesSingleUserViewModelFactory create(
      ViewModelModule module, Provider<AppRepository> repositoryProvider) {
    return new ViewModelModule_ProvidesSingleUserViewModelFactory(module, repositoryProvider);
  }

  public static SingleUserViewModel proxyProvidesSingleUserViewModel(
      ViewModelModule instance, AppRepository repository) {
    return Preconditions.checkNotNull(
        instance.providesSingleUserViewModel(repository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
