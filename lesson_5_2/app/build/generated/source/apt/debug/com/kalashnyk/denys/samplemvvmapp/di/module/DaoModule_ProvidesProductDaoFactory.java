// Generated by Dagger (https://google.github.io/dagger).
package com.kalashnyk.denys.samplemvvmapp.di.module;

import com.kalashnyk.denys.samplemvvmapp.repository.database.AppDatabase;
import com.kalashnyk.denys.samplemvvmapp.repository.database.dao.UserDao;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaoModule_ProvidesProductDaoFactory implements Factory<UserDao> {
  private final DaoModule module;

  private final Provider<AppDatabase> databaseProvider;

  public DaoModule_ProvidesProductDaoFactory(
      DaoModule module, Provider<AppDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public UserDao get() {
    return Preconditions.checkNotNull(
        module.providesProductDao(databaseProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DaoModule_ProvidesProductDaoFactory create(
      DaoModule module, Provider<AppDatabase> databaseProvider) {
    return new DaoModule_ProvidesProductDaoFactory(module, databaseProvider);
  }

  public static UserDao proxyProvidesProductDao(DaoModule instance, AppDatabase database) {
    return Preconditions.checkNotNull(
        instance.providesProductDao(database),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
